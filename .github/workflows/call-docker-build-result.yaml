name: Build, Deploy Result Docker Image to Minikube and Test

on:
  push:
    branches:
      - 'main'
    paths:
      - 'result/**'
      - '.github/workflows/call-docker-build-result.yaml'
  pull_request:
    branches:
      - 'main'
    paths:
      - 'result/**'
      - '.github/workflows/call-docker-build-result.yaml'

jobs:
  build-deploy-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Build Result Docker Image (No push to Docker Hub)
      - name: Build Result Docker Image
        run: |
          docker build -t example-voting-app-result:latest ./result

      # Step 4: Install Minikube
      - name: Install Minikube
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo chmod +x minikube
          sudo mv minikube /usr/local/bin/

      # Step 5: Install kubectl
      - name: Install kubectl
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.24.0/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      # Step 6: Start Minikube
      - name: Start Minikube
        run: |
          minikube start --driver=docker

      # Step 7: Load the Docker image into Minikube
      - name: Load Docker Image into Minikube
        run: |
          minikube image load example-voting-app-result:latest

      # Step 8: Set up kubectl to use Minikube context
      - name: Set up kubectl context for Minikube
        run: |
          kubectl config use-context minikube

      # Step 9: Deploy the Result service to Minikube using Kubernetes manifests
      - name: Deploy Result to Minikube
        run: |
          kubectl apply -f ./k8s-specifications/result-deployment.yaml
          kubectl apply -f ./k8s-specifications/result-service.yaml

      # Step 10: Check deployments to see if the result-deployment exists
      - name: Check Kubernetes Deployments
        run: |
          kubectl get deployments

      # Step 11: Wait for the Result service to be available (can be adjusted based on your app's needs)
      - name: Wait for the Result service to be available
        run: |
          kubectl rollout status deployment/result-deployment || echo "Deployment not yet ready, retrying..."
        
      # Step 12: List Services in Minikube to verify the deployment
      - name: List Services in Minikube
        run: |
          kubectl get svc

      # Step 13: Get the Minikube IP and Service Port
        - name: Get Minikube Service URL
          run: |
            minikube service list
            MINIKUBE_IP=$(minikube ip)
            RESULT_PORT=$(kubectl get svc result-service -o jsonpath='{.spec.ports[0].nodePort}')
            echo "Minikube IP: $MINIKUBE_IP"
            echo "Testing Result service at http://$MINIKUBE_IP:$RESULT_PORT"
            echo "MINIKUBE_IP=$MINIKUBE_IP" >> $GITHUB_ENV
            echo "RESULT_PORT=$RESULT_PORT" >> $GITHUB_ENV

      # Step 14: Run tests against the deployed service
      - name: Run tests against the Result service
        run: |
          curl -s --fail "http://${{ env.MINIKUBE_IP }}:${{ env.RESULT_PORT }}"
          
          # Optionally, you can also run more advanced tests here
          curl -s --fail "http://${{ env.MINIKUBE_IP }}:${{ env.RESULT_PORT }}/test-url"
